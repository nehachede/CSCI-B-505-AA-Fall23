# Given an integer n, return the least number of perfect square numbers that sum to n.# A perfect square is an integer that is the square of an integer; in other words, it is the product# of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are# not.# Test cases# 1) input: 12# output: 3# Explanation: 12 = 4 + 4 + 4# 2) input:13# output: 2# Explanation: 13 = 4 + 9# Function signature# def numSquares(self, n):# **your logic**# return 1def numSquares(n):        def func2(n, temp):        print('func2')        if n == 0:            return 0        if n == 1:            return 1        # if math.sqrt(n)*math.sqrt(n) == n:        #     return n                if temp[n] != 9999:            return temp[n]                i = 1        min_ps = n                while i*i <= n:            print('while', i)            min_ps = min(func2(n-i*i,temp)+1, min_ps)            print('min_ps', min_ps)            # print('temp', temp)            i += 1                temp[n] = min_ps        return min_ps        temp = [9999] * (n+1)    return func2(n, temp)    print(numSquares(24))